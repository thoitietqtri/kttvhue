name: Auto Upload B·∫£n tin (Hu·∫ø)

on:
  schedule:
    # 03:45 ICT m·ªói ng√†y = 20:45 UTC ng√†y h√¥m tr∆∞·ªõc
    - cron: '45 20 * * *'
  workflow_dispatch:

concurrency:
  group: kttvhue-auto-upload
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      USERNAME: ${{ secrets.USERNAME }}       # THUE
      PASSWORD: ${{ secrets.PASSWORD }}       # Hue2024@
      PORTAL_URL: ${{ secrets.PORTAL_URL }}   # http://222.255.11.117:8888/Login.aspx
      UPLOAD_URL: ${{ secrets.UPLOAD_URL }}   # http://222.255.11.117:8888/UploadFile.aspx

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (Playwright + Chromium)
        run: |
          python -m pip install --upgrade pip
          pip install playwright python-dotenv
          playwright install --with-deps chromium

      - name: Sanity check env
        run: |
          python - <<'PY'
          import os, sys
          miss = [k for k in ["USERNAME","PASSWORD","PORTAL_URL","UPLOAD_URL"] if not os.getenv(k)]
          if miss:
              print("::error::Thi·∫øu secrets:", ", ".join(miss))
              sys.exit(1)
          print("OK: Secrets ƒë·ªß.")
          PY

      - name: Ensure PDFs exist under bantin/
        run: |
          ls bantin/*.pdf >/dev/null 2>&1 || (echo "::error::No PDFs in bantin/"; exit 1)

      - name: Check portal reachability (HEAD)
        run: |
          set -e
          for url in "$PORTAL_URL" "$UPLOAD_URL"; do
            echo "Checking $url ..."
            curl -I --max-time 20 "$url" || echo "::warning::Kh√¥ng HEAD ƒë∆∞·ª£c $url (c√≥ th·ªÉ ch·∫∑n GitHub runners)."
          done

      - name: Run uploader (retry t·ªëi ƒëa 3 l·∫ßn, c√°ch nhau 10 ph√∫t)
        shell: bash
        run: |
          set -euo pipefail
          max=3
          gap_sec=$((10*60))   # 10 ph√∫t
          for attempt in $(seq 1 $max); do
            echo "===== Attempt $attempt/$max ====="
            if python tools/playwright_uploader.py; then
              echo "‚úÖ Th√†nh c√¥ng ·ªü l·∫ßn $attempt ‚Äî d·ª´ng retry."
              ts=$(date +%Y%m%d_%H%M%S)
              [ -f after_upload.png ] && cp -f after_upload.png "after_upload_attempt_${attempt}_$ts.png"
              [ -f tools/uploader.log ] && cp -f tools/uploader.log "tools/uploader_attempt_${attempt}_$ts.log"
              exit 0
            else
              echo "‚ùå Th·∫•t b·∫°i l·∫ßn $attempt"
              ts=$(date +%Y%m%d_%H%M%S)
              [ -f after_upload.png ] && cp -f after_upload.png "after_upload_attempt_${attempt}_$ts.png" || true
              [ -f tools/uploader.log ] && cp -f tools/uploader.log "tools/uploader_attempt_${attempt}_$ts.log" || true
              if [ "$attempt" -lt "$max" ]; then
                echo "‚è≥ Ch·ªù 10 ph√∫t r·ªìi th·ª≠ l·∫°i..."
                sleep "$gap_sec"
              fi
            fi
          done
          echo "üö´ H·∫øt s·ªë l·∫ßn th·ª≠, v·∫´n th·∫•t b·∫°i."
          exit 1

      - name: Upload artifact (screenshots/logs)
        uses: actions/upload-artifact@v4
        with:
          name: hue-upload-proof
          path: |
            after_upload*.png
            tools/*.log
            tools/uploader_attempt_*.log
          if-no-files-found: warn
